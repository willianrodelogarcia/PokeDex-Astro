---
export interface Props {
  imageSrc: string;
  title: string;
  description: string;
}

const { imageSrc, title, description } = Astro.props as Props;
---

<div
  class="w-full max-w-sm bg-white border-gray-200 rounded-lg shadow-sm dark:bg-white-800 dark:border-gray-700 hover:shadow-lg transition-shadow duration-300 ease-in-out"
>
  <div class="px-5 pb-5 pt-5" data-card>
    <h5
      class="text-xl font-semibold tracking-tight text-gray-900 dark:text-black-100 text-center"
    >
      {title}
    </h5>

    <img
      id="myImage"
      data-img
      crossorigin="anonymous"
      class="p-8 rounded-t-lg hover:scale-105 transition-transform duration-300 ease-in-out"
      src={imageSrc}
      alt={description}
    />
  </div>
</div>
<canvas id="hiddenCanvas" style="display: none;"></canvas>
<script>
  window.addEventListener('load', function () {
    const cards = document.querySelectorAll('[data-card]');
    const canvas = document.getElementById(
      'hiddenCanvas',
    ) as HTMLCanvasElement | null;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    cards.forEach(card => {
      const img = card.querySelector('[data-img]') as HTMLImageElement | null;
      if (!img) return;
      if (img.complete) {
        applyColor(img, card as HTMLElement);
      } else {
        img.addEventListener('load', () =>
          applyColor(img, card as HTMLElement),
        );
      }
    });

    function applyColor(img: HTMLImageElement, card: HTMLElement) {
      if (!canvas || !ctx) return;
      const width = img.naturalWidth;
      const height = img.naturalHeight;

      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, width, height);

      const regionWidth = width * 0.4;
      const regionHeight = height * 0.4;
      const startX = (width - regionWidth) / 2;
      const startY = (height - regionHeight) / 2;

      const imageData = ctx.getImageData(
        startX,
        startY,
        regionWidth,
        regionHeight,
      ).data;

      let r = 0,
        g = 0,
        b = 0,
        count = 0;

      for (let i = 0; i < imageData.length; i += 4 * 10) {
        r += imageData[i];
        g += imageData[i + 1];
        b += imageData[i + 2];
        count++;
      }

      r = Math.floor(r / count);
      g = Math.floor(g / count);
      b = Math.floor(b / count);

      card.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
    }
  });
</script>
